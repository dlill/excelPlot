% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{verifyArg}
\alias{verifyArg}
\title{Verify that input arguments meet certain conditions}
\usage{
verifyArg(
  x,
  allowNull = FALSE,
  expectedClass,
  expectedMode,
  expectedLength,
  expectedSign,
  expectedNames,
  expectedTestFun
)
}
\arguments{
\item{x}{Any object}

\item{allowNull}{TRUE: x can be null. If TRUE and x is null, no additional tests are made.}

\item{expectedClass}{Missing or character denoting the class of x}

\item{expectedMode}{Missing or character denoting the mode of x}

\item{expectedLength}{Missing or integer denoting the length of x}

\item{expectedSign}{Missing or 1 or -1 denoting the sign of x}

\item{expectedNames}{Names which must at least be present in x}

\item{expectedTestFun}{A function for which the call \code{expectedTestFun(x)} returns TRUE (test is passed) or FALSE (test is failed)}
}
\value{
Called for side-effect. If all tests pass, nothing happens. If errors occur, they are collected in informative error messages.
}
\description{
Verify that input arguments meet certain conditions
}
\examples{
\dontrun{

# Intended use case: Within a function
f <- function(myFancyArgument) {verifyArg(myFancyArgument,
  expectedMode = "character", expectedLength = 2)}
f(c(2)) # Two errors
f(c(2,3)) # One error
f(as.character(c(2))) # One error
f(as.character(c(2,3))) # No error

# Works also with more complex expressions:
f2 <- function(myFancyDF) {verifyArg(myFancyDF$TIME, expectedMode = "numeric")}
f2(data.frame(TIME = letters))

# Checking for integers is a bit tricky and should not necessarily be done with expectedClass

# Doubles
verifyArg(1, expectedClass = "numeric")    # Gives no error
verifyArg(1, expectedClass = "double")     # Gives error
verifyArg(1, expectedMode = "numeric")     # Gives no error
verifyArg(1, expectedTestFun = is.numeric) # Gives no error, last resort

# Integers
verifyArg(1L, expectedClass = "numeric") # Gives error
verifyArg(1L, expectedMode = "numeric")  # Gives no error


}
}
